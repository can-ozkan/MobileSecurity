Android SDK Tools
-----------------
adb
monitor -> see running processes
aapt -> used by apktool to package source code into binary form when building apps

Emulator Restrictions
---------------------
Have root access
Cannot make phone calls
Cannot simulate calls and SMS

Android OS Basics
-----------------
Modified Linux kernel
Dalvik Virtual Machine
Each app runs under a different UID unless a developer chooses to set several apps with the same signature share a UID
/data/data is the home directory for applications/users
APK file is a zipped archived. It contains code, metadata resources etc

APK Packaging Process
----------------------
aapt converts XML resource to binary form
aidl converts .aidl to .java
All source code and output from aapt and aidl compiled into .class files by Java compiler
dx converts .class files to a single classes.dex file
apkbuilder combines all compiled resources, images and DEX file into an APK file
jarsigner signs the APK

Structure of an APK
-------------------
/assets -> Files that developers want to include
/res -> Layout, images etc in raw subdirectory
/lib -> Libraries x86, ARM, MIPS
/META-INF -> Certificate of an application, file inventory with hashes
AndroidManifest.xml -> Summary of the application, config details of the app, permissions that the app ask for etc
classes.dex -> Executable file that contains Dalvik bytecode
resources.rsrc -> Strings of the app, other resources

Drozer
------
Security assessment tool/framework that finds vulnerabilities and develops exploits
Agent, console based tool
Agent is installed on mobile device

Application Components
-----------------------
Activities -> Visual screens of an application
Services -> Components with no GUI
Broadcast Receivers -> can detect events like incoming SMS
Content Providers -> data storehouse

Code Signing
------------
Public Key Cryptography
Private key is held only by app developers
Generate key with keytool
Sign app with jarsigner
Signature in META-INF directory
Android does not verify the certificate in any way
Certificates do not need to come from a trusted CA
Most are self-signed
Certificate is checked only when app is being installed

Signing Vulnerabilities
------------------------
Master Key Vulnerabilitiy
If two files are in the APK archive with the same file name. Only the first file's hash is checked. But the second is actually deployed to the device
Potential RCE

Understanding Permissions
--------------------------
Permissions that the app ask for will be declared in AndroidManifest.xml

Application Sandboxing
----------------------
Each app runs as its own user unless it requests to run as sharedUserId and has the same signature as another application
Not a separate VM for each app. It is just a separate process
Only Linux user and group permissions protect the application

Full-Disk Encryption
--------------------
Prevents data theft from a stolen device
Available since Android version 3.0
Encrypts with AES-CBC
FDE is going away, replaced by file-based encryption
SD card is not encrypted
FDE protects data at rest

Generic Exploit Mitigation Protections
--------------------------------------
Stack Cookies : Protects against basic stack-based overflows by including a canary value after the stack that is checked
safe_iop : Provides a library that helps reduce integer overflows
dlmalloc extensions : Helps prevent double free() vulnerabilities and other common ways to exploit heap corruptions
calloc extensions : Helps prevent integer overflows during memory allocations
Format String Protections : Helps prevent the exploitation of format string vulnerabilities
NX (No eXecute) : Prevents code from running on the stack or heap
Partial ASLR (Address Space Layout Randomization) : Randomizes the location of libraries and other memory segments in order to defeat a common exploitation
technique called ROP (Return Oriented Programming)
PIE (Position Independent Executable) Support : Supports ASLR to ensure all memory components are fully randomized
RELRO (Relocation Read-Only) and BIND_NOW : Hardens data section inside a process by making them read-only. This prevents common exploitation techniques such as
GOT (Global Offset Table) overwrites
FORTIFY_SOURCE : Replaces common C functions that are known to cause security problems with fortified versions

Kernel Protections
------------------
Removed setuid/setguid programs : Removed all setuid/setgid programs and added support for filesystem capabilities instead
Restrict setuid from installed apps : The /system partition is mounted as nosuid for all processes that were spawned by zygote, meaning that installed applications
cannot abuse vulnerabilities in any suid binaries to gain root access

Rooting Process
---------------
Android does not allow users to use root by default
Rooting typicallt adds a su binary, allowing elavation to root

Rooting Methods
---------------
Use an exploit (Examples : Gingerbreak, Exynos abuse, Samsung admire, Ace Iconia, Master Key, Towelroot)
Use an unlocked bootloader : Flash new firmware onto the device (A new recovery image or a rooted kernel image containing su)

Vulnerability Scanning
----------------------
Qark, AndroBugs, Drozer, MobSF (may produce some false-positives, manually check every vulnerability found by scanners)

Attacking Application Container
----------------------------
Defeat application sandbox in order to gain access to the application
Malicious applications on the device
Physical access to the device
Other vulnerabilities on the application

Attacking Communication Issues
------------------------------
ARP Poisoining
Hosting a malicious wireless network
Compromising upstream providers
Intercept and modify traffic

Attacking Internet Server
-------------------------
Server may have vulnerabilities
Compromised server exposes all information flowing to and from mobile devices

targetSdkVersion : Determines default publishing of components. Other values are compileSdkVersion and minSdkVersion

Attacking Application Components
--------------------------------
Explicitly Exporting Components
-------------------------------
Explicitly Exported : 
  <receiver
    android:name="com.xxx.receiver"
    android:exported=true>
  </receiver>
  
Unspecified; will be exported implicitly if targetSdkVersion < 17

Implicitly Exported
-------------------
Any component that uses intent-filter is exported by default

Finding Exported Components
---------------------------
Examine AndroidManifest.xml
Drozer's attacksurface module shows exported components

Supreme User Contexts
---------------------
root and system users can interact with application components even when they are not exported at all
Components that are not exported in the AndroidManifest.xml are private, meaning they are limited to internal use by the application. Only attackers who have
root privileges can attack them

Permission Protection Levels
----------------------------
If you define a new permission, developers need to assign a permission protection to that permission
Best protection is a custom permission with protection level signature, meaning that only applications with same signature can have that permission

Intents
-----------------
Intent is a data object that defines a task to be performed
To start an activity, call startActivity(Intent)
sendBroadcast(Intent) sends a broadcast to a broadcast receiver
startService(Intent) sends to a service
Intent is generic. It does not specify type of components receiving it

Explicit Intents
----------------
State the component that must receive it
Using setComponent() or setClass()
Bypasses the intent resolution process in the OS
Directly delivers the intent to the specified component

am : Activity Manager -> Lets you send intents to application components
adb shell am start -a android.intent.action.VIEW







